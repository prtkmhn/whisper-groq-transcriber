{
  "_json, set_model, setup_embedding  # import the new groq integration\r\nimport gradio as gr\r\nfrom pynput.keyboard import controller\r\nfrom helpers import (\r\n    resultthread, load_config_with_defaults, clear_status_queue, stop_recording, on_shortcut, get_selected_text,\r\n    typewrite, format_keystrokes, on_groq_shortcut, chat_with_bot, add_url, upload_pdf, set_model_and_retriever\r\n)\r\nfrom hotkey import setup_dynamic_hotkeys,": "# main.py\r\n\r\nimport os\r\nimport json\r\nimport queue\r\nimport threading\r\nimport time\r\nimport keyboard\r\nimport pyperclip\r\nfrom pynput import keyboard as pynput_keyboard\r\nfrom audioplayer import AudioPlayer\r\nfrom transcription import create_local_model, record_and_transcribe\r\nfrom status_window import StatusWindow\r\nfrom groq_integration import get_groq_response, send_latest_text_to_groq, update_json, set_model, setup_embedding  # Import the new Groq integration\r\nimport gradio as gr\r\nfrom pynput.keyboard import Controller\r\nfrom helpers import (\r\n    ResultThread, load_config_with_defaults, clear_status_queue, stop_recording, on_shortcut, get_selected_text,\r\n    typewrite, format_keystrokes, on_groq_shortcut, chat_with_bot, add_url, upload_pdf, set_model_and_retriever\r\n)\r\nfrom hotkey import setup_dynamic_hotkeys, update_hotkey, get_current_hotkeys, create_hotkey\r\n\r\n# Global variables for chat history, selected model, and dynamic URLs\r\nchat_history = []\r\nselected_model = \"llama3-8b-8192\"\r\ndynamic_urls = []\r\nfolder_path = os.path.join('src', 'upload')  # Define folder_path globally\r\n# Clear hotkeys.json on app start\r\nhotkeys_path = os.path.join('src', 'hotkeys.json')\r\nwith open(hotkeys_path, 'w') as file:\r\n    json.dump({}, file)\r\n\r\n# Main script\r\nconfig = load_config_with_defaults()\r\n\r\nmodel_method = 'OpenAI\\'s API' if config['use_api'] else 'a local model'\r\nprint(f'Script activated. Whisper is set to run using {model_method}. To change this, modify the \"use_api\" value in the src\\\\config.json file.')\r\n\r\n# Set up local model if needed\r\nlocal_model = None\r\nif not config['use_api']:\r\n    print('Creating local model...')\r\n    local_model = create_local_model(config)\r\n    print('Local model created.')\r\n\r\nprint(f'WhisperWriter is set to record using {config[\"recording_mode\"]}. To change this, modify the \"recording_mode\" value in the src\\\\config.json file.')\r\nprint(f'The activation key combo is set to {format_keystrokes(config[\"activation_key\"])}.', end='')\r\nif config['recording_mode'] == 'voice_activity_detection':\r\n    print(' When it is pressed, recording will start, and will stop when you stop speaking.')\r\nelif config['recording_mode'] == 'press_to_toggle':\r\n    print(' When it is pressed, recording will start, and will stop when you press the key combo again.')\r\n# elif config['recording_mode'] == 'hold_to_record':\r\n#     print(' When it is pressed, recording will start, and will stop when you release the key combo.')\r\nprint('Press alt+C on the terminal window to quit.')\r\n\r\n# Set up status window and keyboard listener\r\nstatus_queue = queue.Queue()\r\npyinput_keyboard = Controller()\r\nrecording_thread = None  # Initialize recording_thread\r\nstatus_window = None  # Initialize status_window\r\n\r\nkeyboard.add_hotkey(config['activation_key'], lambda: on_shortcut(config, status_queue, local_model, recording_thread, status_window))\r\nkeyboard.add_hotkey('ctrl+alt+space', lambda: on_shortcut(config, status_queue, local_model, recording_thread, status_window))  # Add new hotkey for Groq integration\r\nkeyboard.add_hotkey('alt+c', lambda: stop_recording(recording_thread))  # Add hotkey to stop recording\r\nkeyboard.add_hotkey('ctrl+alt+v', lambda: on_groq_shortcut(config))  # Add hotkey to paste clipboard content\r\n\r\n# Set up dynamic hotkeys\r\ndynamic_hotkeys = setup_dynamic_hotkeys(config)\r\n\r\n# Function to add URL or PDF\r\ndef add_url_or_pdf(url, pdf, config):\r\n    if url:\r\n        return add_url(url, config)\r\n    elif pdf:\r\n        return upload_pdf(pdf, config)\r\n    else:\r\n        return \"Please provide a URL or PDF.\"\r\n\r\n# Gradio UI\r\nwith gr.Blocks() as demo:\r\n    gr.Markdown(\"# WhisperWriter with Gradio UI\")\r\n    \r\n    with gr.Tab(\"Chat with Bot\"):\r\n        model_selector = gr.Dropdown([\"llama3-8b-8192\", \"llama3-70b-8192\", \"mixtral-8x7b-32768\"], label=\"Select Model\", value=\"llama3-8b-8192\")\r\n        model_selector.change(lambda model_name: set_model_and_retriever(model_name, config), inputs=model_selector, outputs=None)\r\n        \r\n        chat_output = gr.Chatbot(label=\"Chat History\")\r\n        query = gr.Textbox(label=\"Your Query\", placeholder=\"Type your message here...\")\r\n        chat_button = gr.Button(\"Chat\")\r\n        \r\n        chat_button.click(lambda query: chat_with_bot(query, config), inputs=[query], outputs=[chat_output, gr.Textbox(label=\"Details\")])\r\n    \r\n    with gr.Tab(\"Manage Hotkeys\"):\r\n        \r\n        with gr.Row():\r\n            with gr.Column():\r\n                hotkeys_list = gr.Textbox(label=\"Current Hotkeys\", value=get_current_hotkeys(), interactive=False)         \r\n            with gr.Column():\r\n                gr.Markdown(\"### Create/Update Hotkey\")\r\n                hotkey_name = gr.Textbox(label=\"Hotkey Name\")\r\n                ctrl_button = gr.Checkbox(label=\"Ctrl\")\r\n                alt_button = gr.Checkbox(label=\"Alt\")\r\n                shift_button = gr.Checkbox(label=\"Shift\")\r\n                key_input = gr.Textbox(label=\"Key\")\r\n                post_processing = gr.Textbox(label=\"Post-Processing Command\")\r\n                action_type = gr.Radio([\"json\", \"print\"], label=\"Action Type\")\r\n                create_button = gr.Button(\"Create Hotkey\")\r\n                create_output = gr.Textbox(label=\"Output\")\r\n                \r\n                def create_hotkey_ui(hotkey_name, key_input, ctrl, alt, shift, post_processing, action_type):\r\n                    combination = '+'.join([key for key, selected in zip(['ctrl', 'alt', 'shift'], [ctrl, alt, shift]) if selected])\r\n                    if key_input:\r\n                        combination += f\"+{key_input}\"\r\n                    result = create_hotkey(hotkey_name, combination, post_processing, action_type, dynamic_hotkeys, config)\r\n                    updated_hotkeys = get_current_hotkeys()\r\n                    return result, updated_hotkeys\r\n                \r\n                create_button.click(create_hotkey_ui, inputs=[hotkey_name, key_input, ctrl_button, alt_button, shift_button, post_processing, action_type], outputs=[create_output, hotkeys_list])\r\n            \r\n\r\n        \r\n    with gr.Tab(\"Add URL or PDF\"):\r\n        url_input = gr.Textbox(label=\"Enter URL\")\r\n        pdf_input = gr.File(label=\"Upload PDF\", file_types=[\".pdf\"])\r\n        add_url_button = gr.Button(\"Add URL or PDF\")\r\n        add_url_output = gr.Textbox(label=\"Output\")\r\n        \r\n        add_url_button.click(lambda url, pdf: add_url_or_pdf(url, pdf, config), inputs=[url_input, pdf_input], outputs=add_url_output)\r\n\r\ndemo.launch"
}